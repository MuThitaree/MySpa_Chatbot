# -*- coding: utf-8 -*-
"""MySpa_Chatbot_Sentiment_Prj.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uKXZHdMopy4yZLfuaC7dT3aV7pkOc9rU
"""

!pip -q install groq
!pip install gradio
!pip install openpyxl
!pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib
!pip install google-colab

#=========VSCode=====================================================================
# from dotenv import find_dotenv, load_dotenv
# _ = load_dotenv(find_dotenv())
# import os
# secret_key = os.environ.get("GROQ_API_kEY")
#========google.colab======================================================================
from google.colab import userdata
secret_key = userdata.get('GROQ_API_kEY')

from groq import Groq

clientGroq = Groq(
    api_key= secret_key,
)

def is_thai(text):
    """Check if the text contains any Thai character"""
    return any('\u0E00' <= ch <= '\u0E7F' for ch in text)

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
#df = pd.read_excel("/spa_services_withkeywords.xlsx")
df = pd.read_excel("/content/drive/MyDrive/SpaProject/spa_services_withkeywords.xlsx")
df.head()

def get_completion(prompt, model= "llama3-70b-8192", clientGroq = clientGroq):
    messages = [{"role": "user", "content": prompt}]
    response = clientGroq.chat.completions.create(
        model=model,
        messages=messages,
        temperature=0,
        max_tokens= 4000,
        top_p = 0.5
    )
    return response.choices[0].message.content

def get_spa_recommendation(user_input):
    user_input_lower = user_input.lower()
    matched_rows = []

    for _, row in df.iterrows():
        eng_keywords = [kw.strip().lower() for kw in str(row["Keywords"]).split(",")]
        thai_keywords = [kw.strip().lower() for kw in str(row["Keywords (Thai)"]).split(",")]
        all_keywords = eng_keywords + thai_keywords

        # Count how many keywords appear in user input
        match_count = sum(1 for kw in all_keywords if kw in user_input_lower)

        if match_count > 0:
            matched_rows.append({
                "row": row,
                "match_count": match_count,
                "price": row["Price"]
            })

    if not matched_rows:
        return "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì" if is_thai(user_input) else "‚ùå No matching service found for your request."

    # Sort by match count first, then by price
    sorted_matches = sorted(matched_rows, key=lambda x: (x["match_count"], x["price"]), reverse=True)
    top_row = sorted_matches[0]["row"]

   # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏à‡∏≤‡∏Å Excel ‡∏ï‡∏£‡∏á ‡πÜ
    service_name = top_row['Service']
    duration = top_row['Duration']
    price = top_row['Price']

    if is_thai(user_input):
          prompt = f"""
      ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏õ‡∏≤‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‡πÉ‡∏´‡πâ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏Å MySpa ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
      ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {user_input}
      ‡∏Ñ‡∏∏‡∏ì: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏õ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà Mapping ‡∏à‡∏≤‡∏Å Keyword ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢ Keyword ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏µ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à ‡∏à‡∏≤‡∏Å {service_name} ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ ‡∏à‡∏≤‡∏Å {duration} ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô {price}
      ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
      ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à ‡∏à‡∏≤‡∏Å {service_name} ‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πà‡∏ô ‡∏°‡∏µ‡∏™‡∏µ‡∏™‡∏£‡∏£‡∏ô‡∏¥‡∏î ‡πÅ‡∏•‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô Format ‡∏Ç‡∏≠‡∏á Markdown
      """
    else:
        prompt = f"""
      You are a spa assistant. Before recommending a services ,first greeting the customer with Hello dear customer, MySpa is happy to server you then provide suggestions based on the customer's symptoms or feeling.
      Customer input: {user_input}
      Please recommend **only one** service using the information and format below :

      - Service: {service_name}
      - Duration: {duration}
      - Price: {price} THB

      Also, explain the benefits or outcomes of the recommended package.
      Display the results in Eng language, new line for highlight the package name from {service_name} to make it stand out.
      Before presenting, greet the customer again. Display all the results in the Markdown format.
      """
    return get_completion(prompt)

import gradio as gr

def spa_bot_interface(text):
    return get_spa_recommendation(text)

#gr.Interface(
#    fn=spa_bot_interface,
#    inputs=gr.Textbox(label="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì / Your symptom"),
#    # Use gr.Textbox as the output component with a label
#    outputs=gr.Textbox(label="‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å BHU MHAI SPA / Suggestion from BHU MHAI SPA"),
#    title="BHU MHAI Spa",
#    description="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏ó‡∏≤‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏à‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏õ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"
#).launch(debug=False,share=True)

# prompt: # prompt: We need procedure involve with input feedback from customer and report sentiment feeling about feedback positive , negative or neutral and save result of all feedback and sentiment into excel file name result_spa_sentiment.xls by saving file into google drive in path /content/drive/MyDrive/SpaProject  if can not file that create file and we need interface by using gradio and make this part into function for calling
from google.colab import drive
import os

# Mount Google Drive
drive.mount('/content/drive')

def analyze_sentiment(text):
    """Analyzes the sentiment of the input text using the Groq API."""
    prompt = f"""
    Analyze the sentiment of the following customer feedback. Classify the sentiment as 'positive', 'negative', or 'neutral'.
    Only respond with the sentiment classification. Do not include any other text.

    Customer Feedback: "{text}"
    Sentiment:
    """
    sentiment = get_completion(prompt)
    return sentiment.strip().lower()

def process_feedback_and_save(feedback):
    """Processes customer feedback, analyzes sentiment, and saves to an Excel file."""
    sentiment = analyze_sentiment(feedback)

    # Define the path to the Excel file
    excel_file_path = '/content/drive/MyDrive/SpaProject/result_spa_sentiment.xlsx'

    # Check if the directory exists, create it if not
    if not os.path.exists('/content/drive/MyDrive/SpaProject'):
        os.makedirs('/content/drive/MyDrive/SpaProject')

    # Load existing data or create a new DataFrame
    try:
        df_sentiment = pd.read_excel(excel_file_path)
    except FileNotFoundError:
        df_sentiment = pd.DataFrame(columns=['Feedback', 'Sentiment'])

    # Append the new feedback and sentiment
    new_row = pd.DataFrame({'Feedback': [feedback], 'Sentiment': [sentiment]})
    df_sentiment = pd.concat([df_sentiment, new_row], ignore_index=True)

    # Save the updated DataFrame to Excel
    df_sentiment.to_excel(excel_file_path, index=False)

    return f"Feedback received: '{feedback}'\nSentiment: {sentiment}\nSaved to: {excel_file_path}"

def feedback_interface(feedback):
    """Gradio interface function to process and save feedback."""
    return process_feedback_and_save(feedback)

# Add a new Gradio interface for feedback
#gr.Interface(
#    fn=feedback_interface,
#    inputs=gr.Textbox(label="Enter your feedback"),
#    outputs=gr.Textbox(label="Feedback Analysis Result"),
#    title="Customer Feedback Sentiment Analysis",
#    description="Enter your feedback to get sentiment analysis and save it."
#).launch(debug=False, share=True)

#from googletrans import Translator
# ‚úÖ STEP 1: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ (‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û)
def summarize_text(text):
    prompt = f"‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô:\n\n{text} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÉ‡∏™‡πà Markdown"
    return get_completion(prompt)
    #return response['choices'][0]['message']['content']
# ‚úÖ STEP 2: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô
def generate_spa_promo(topic):
    prompt = f"""
    ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡∏™‡∏≤‡∏¢‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏õ‡∏≤
    ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå Facebook ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô MySpa Shop ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ "{topic}"
    ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ:
    - ‡∏Ñ‡∏≥‡πÇ‡∏õ‡∏£‡∏¢‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏û‡∏™‡∏ï‡πå
    - ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏ä‡∏¥‡∏ç‡∏ä‡∏ß‡∏ô
    - ‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏î‡∏π‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à (‡πÄ‡∏ä‡πà‡∏ô üíÜ‚Äç‚ôÄÔ∏è‚ú®üéâüåø)
    - ‡∏õ‡∏¥‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏Æ‡∏ä‡πÅ‡∏ó‡πá‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö Facebook ‡∏´‡∏£‡∏∑‡∏≠ Line OA ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÉ‡∏™‡πà Markdown
    """
    return summarize_text(get_completion(prompt))
    #return response['choices'][0]['message']['content']

import gradio as gr

# üß† ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
#def spa_bot_interface(symptom):
#    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏î‡πâ
#    return f"‡∏à‡∏≤‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£ '{symptom}', ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: Thai Massage 60 mins"

#def feedback_interface(feedback):
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡πá‡∏ô
#    return f"‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô: '{feedback}' (‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ß‡πà‡∏≤: Positive)"

# üåê Gradio Web UI (Single Page)
with gr.Blocks(title="MySpa Chatbot") as demo:
    gr.Markdown("## üå∏ MySpa Chatbot\n‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")
    with gr.Tab("üíÜ Spa Recommend"):
       gr.Markdown("### ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")
       with gr.Row():
           symptom_input = gr.Textbox(label="‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì / Your Symptom", placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡∏ß‡∏î‡∏´‡∏•‡∏±‡∏á ‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î...")
           recommend_output = gr.Textbox(label="‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å MySpa SPA", interactive=False)
       spa_btn = gr.Button("üéØ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£")
       spa_btn.click(fn=spa_bot_interface, inputs=symptom_input, outputs=recommend_output)
    with gr.Tab("üó£Ô∏è Customer Feedback"):
       gr.Markdown("### ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤")
       with gr.Row():
          feedback_input = gr.Textbox(label="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì / Your Feedback", placeholder="‡πÉ‡∏™‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥...")
          feedback_output = gr.Textbox(label="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô", interactive=False)
       fb_btn = gr.Button("üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô")
       fb_btn.click(fn=feedback_interface, inputs=feedback_input, outputs=feedback_output)
    with gr.Tab("‚ú® AI Post Generator"): # Renamed tab for clarity
       gr.Markdown("### ‡πÉ‡∏´‡πâ AI ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤")
       with gr.Row():
          # Add an input textbox for the user to enter the topic
          #post_topic_input = gr.Textbox(label="‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå / Topic for Post", placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏™‡∏õ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏™...")
          post_topic_input = gr.Dropdown(label="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå / Choose a topic for the post", choices=["‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà", "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ", "‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"])
          post_output = gr.Textbox(label="‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ AI", interactive=False)
       post_btn = gr.Button("üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå") # Renamed button for clarity
       # Link the button click to the generate_spa_promo function, using the textbox as input
       post_btn.click(fn=generate_spa_promo, inputs = post_topic_input, outputs=post_output)
# üöÄ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
demo.launch(share=True)